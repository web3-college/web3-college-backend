// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client/postgresql"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 配置seed脚本
generator seed {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

// 用户表
model User {
  id                  Int                  @id @default(autoincrement())
  address             String               @unique // 用户的钱包地址
  name                String? // 用户名称
  email               String?              @unique // 用户邮箱
  avatar              String? // 用户头像
  bio                 String? // 用户简介
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  purchasedCourses    PurchasedCourse[] // 用户购买的课程
  roles               UserRole[] // 用户角色关系
  certificateRequests CertificateRequest[] // 证书请求
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  Users           UserRole[]
  RolePermissions RolePermissions[]
}

model UserRole {
  userId Int
  roleId Int
  Role   Role @relation(fields: [roleId], references: [id])
  User   User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  action      String
  description String?

  RolePermissions RolePermissions[]
}

model RolePermissions {
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

// 课程表
model Course {
  id                  Int                  @id @default(autoincrement()) // 对应合约中的web2CourseId
  name                String // 课程名称
  description         String? // 课程描述
  coverImage          String? // 课程封面图
  price               Float // 课程价格（YD代币）
  creator             String // 课程创建者地址
  isActive            Boolean              @default(true) // 课程是否可购买
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  onChainId           Int? // 链上课程ID
  categoryId          Int? // 课程分类ID
  category            Category?            @relation(fields: [categoryId], references: [id])
  purchasedCourses    PurchasedCourse[] // 购买记录
  sections            CourseSection[] // 课程章节
  courseProgress      CourseProgress[] // 学习进度
  certificateRequests CertificateRequest[] // 证书请求
}

// 课程章节
model CourseSection {
  id          Int              @id @default(autoincrement())
  courseId    Int
  course      Course           @relation(fields: [courseId], references: [id])
  title       String // 章节标题
  description String? // 章节描述
  order       Int // 章节顺序
  videoUrl    String // 视频URL
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isPreview   Boolean          @default(false) // 是否为预览章节
  duration    Int              @default(0) // 视频时长（秒）
  progress    CourseProgress[] // 学习进度
}

// 用户购买课程记录
model PurchasedCourse {
  id            Int              @id @default(autoincrement())
  userId        Int
  user          User             @relation(fields: [userId], references: [id])
  courseId      Int
  course        Course           @relation(fields: [courseId], references: [id])
  purchasedAt   DateTime         @default(now())
  txHash        String? // 交易哈希
  onChainStatus Boolean          @default(false) // 链上状态验证
  progress      CourseProgress[] // 学习进度

  @@unique([userId, courseId]) // 用户不能重复购买同一课程
}

// 课程学习进度
model CourseProgress {
  id                Int              @id @default(autoincrement())
  userId            String // 用户ID
  courseId          Int // 课程ID
  course            Course           @relation(fields: [courseId], references: [id])
  sectionId         Int
  section           CourseSection    @relation(fields: [sectionId], references: [id])
  status            ProgressStatus   @default(STARTED)
  progress          Float            @default(0) // 0-100进度百分比
  lastPosition      Int? // 上次观看的位置（秒）
  updatedAt         DateTime         @updatedAt
  PurchasedCourse   PurchasedCourse? @relation(fields: [purchasedCourseId], references: [id])
  purchasedCourseId Int?

  @@unique([userId, sectionId]) // 一个用户的某个章节只有一条进度记录
}

// 进度状态枚举
enum ProgressStatus {
  NOT_STARTED
  STARTED
  COMPLETED
}

// 课程分类表
model Category {
  id          Int      @id @default(autoincrement())
  name        String // 分类名称
  description String? // 分类描述
  icon        String? // 分类图标
  order       Int      @default(0) // 排序顺序
  isActive    Boolean  @default(true) // 是否激活
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[] // 关联的课程
}

// 证书请求
model CertificateRequest {
  id        Int               @id @default(autoincrement())
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  address   String // 用户地址
  courseId  Int
  course    Course            @relation(fields: [courseId], references: [id])
  notes     String? // 申请备注
  feedback  String? // 反馈信息
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    CertificateStatus @default(PENDING)
  txHash    String? // 证书交易哈希
}

// 证书状态枚举
enum CertificateStatus {
  PENDING
  APPROVED
  REJECTED
  ISSUED
}
